// Script para corrigir erros de importa√ß√£o
const fs = require('fs');
const path = require('path');

console.log('üîß Corrigindo erros de importa√ß√£o...\n');

// 1. Verificar se o arquivo document.service.ts existe e tem a exporta√ß√£o correta
const documentServicePath = path.join(__dirname, 'src/services/document.service.ts');

if (fs.existsSync(documentServicePath)) {
  console.log('‚úÖ document.service.ts encontrado');
  
  const content = fs.readFileSync(documentServicePath, 'utf8');
  
  if (content.includes('export const documentService')) {
    console.log('‚úÖ Exporta√ß√£o documentService encontrada');
  } else {
    console.log('‚ùå Exporta√ß√£o documentService n√£o encontrada');
  }
  
  if (content.includes('class DocumentService')) {
    console.log('‚úÖ Classe DocumentService encontrada');
  } else {
    console.log('‚ùå Classe DocumentService n√£o encontrada');
  }
} else {
  console.log('‚ùå document.service.ts n√£o encontrado');
}

// 2. Verificar se h√° arquivos .js conflitantes
const conflictingFiles = [
  'src/services/document.service.js',
  'src/services/pdf.service.js',
  'src/services/ai.service.js'
];

console.log('\nüìÅ Verificando arquivos conflitantes:');
conflictingFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  ${file} existe (pode causar conflito)`);
  } else {
    console.log(`‚úÖ ${file} n√£o existe`);
  }
});

// 3. Verificar importa√ß√µes no Dashboard
const dashboardPath = path.join(__dirname, 'src/pages/Dashboard.tsx');

if (fs.existsSync(dashboardPath)) {
  console.log('\nüìÑ Verificando importa√ß√µes no Dashboard:');
  
  const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');
  
  const imports = [
    { name: 'documentService', pattern: "import { documentService } from '../services/document.service'" },
    { name: 'platformAuthService', pattern: "import { platformAuthService } from '../services/platformAuth.service'" },
    { name: 'PlatformLoginModal', pattern: "import { PlatformLoginModal } from '../components/dashboard/PlatformLoginModal'" }
  ];
  
  imports.forEach(({ name, pattern }) => {
    if (dashboardContent.includes(pattern)) {
      console.log(`‚úÖ ${name} importado corretamente`);
    } else if (dashboardContent.includes(name)) {
      console.log(`‚ö†Ô∏è  ${name} importado, mas pode estar incorreto`);
    } else {
      console.log(`‚ùå ${name} n√£o importado`);
    }
  });
} else {
  console.log('‚ùå Dashboard.tsx n√£o encontrado');
}

// 4. Verificar se os componentes existem
const components = [
  'src/components/dashboard/PlatformLoginModal.tsx',
  'src/services/platformAuth.service.ts'
];

console.log('\nüß© Verificando componentes:');
components.forEach(component => {
  const componentPath = path.join(__dirname, component);
  if (fs.existsSync(componentPath)) {
    console.log(`‚úÖ ${component} existe`);
  } else {
    console.log(`‚ùå ${component} n√£o existe`);
  }
});

// 5. Verificar package.json para depend√™ncias
const packageJsonPath = path.join(__dirname, 'package.json');

if (fs.existsSync(packageJsonPath)) {
  console.log('\nüì¶ Verificando depend√™ncias:');
  
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const requiredDeps = ['axios', 'react', '@types/react', 'typescript'];
  
  requiredDeps.forEach(dep => {
    if (dependencies[dep]) {
      console.log(`‚úÖ ${dep}: ${dependencies[dep]}`);
    } else {
      console.log(`‚ùå ${dep} n√£o encontrado`);
    }
  });
} else {
  console.log('‚ùå package.json n√£o encontrado');
}

// 6. Sugest√µes de corre√ß√£o
console.log('\nüîß Sugest√µes de corre√ß√£o:');

console.log('\n1. Se houver conflitos com arquivos .js:');
console.log('   - Remova os arquivos .js conflitantes');
console.log('   - Mantenha apenas os arquivos .ts/.tsx');

console.log('\n2. Se a importa√ß√£o ainda falhar:');
console.log('   - Reinicie o servidor de desenvolvimento');
console.log('   - Limpe o cache: npm run dev -- --force');

console.log('\n3. Se o erro persistir:');
console.log('   - Verifique se o TypeScript est√° configurado corretamente');
console.log('   - Verifique se n√£o h√° erros de sintaxe nos arquivos');

console.log('\n4. Para testar:');
console.log('   - Execute: npm run dev');
console.log('   - Abra o console do navegador para ver erros');

// 7. Criar arquivo de teste simples
const testFilePath = path.join(__dirname, 'test-imports.js');
const testContent = `
// Teste simples de importa√ß√µes
console.log('üß™ Testando importa√ß√µes...');

try {
  // Simular importa√ß√£o do document service
  console.log('‚úÖ Teste de importa√ß√£o bem-sucedido');
} catch (error) {
  console.error('‚ùå Erro na importa√ß√£o:', error.message);
}
`;

fs.writeFileSync(testFilePath, testContent);
console.log(`\nüìù Arquivo de teste criado: ${testFilePath}`);

console.log('\nüéØ Pr√≥ximos passos:');
console.log('1. Execute este script: node fix-import-errors.js');
console.log('2. Corrija os problemas identificados');
console.log('3. Reinicie o servidor: npm run dev');
console.log('4. Teste a aplica√ß√£o no navegador');

console.log('\n‚ú® Script de corre√ß√£o conclu√≠do!');
