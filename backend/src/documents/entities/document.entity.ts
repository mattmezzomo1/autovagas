import { Entity, Column, ManyToOne, JoinColumn } from 'typeorm';
import { ApiProperty } from '@nestjs/swagger';
import { BaseEntity } from '../../common/entities/base.entity';
import { User } from '../../users/entities/user.entity';

export enum DocumentType {
  RESUME = 'resume',
  COVER_LETTER = 'cover_letter',
  PORTFOLIO = 'portfolio',
  CERTIFICATE = 'certificate',
  OTHER = 'other',
}

@Entity('documents')
export class Document extends BaseEntity {
  @ApiProperty({ description: 'Document name' })
  @Column()
  name: string;

  @ApiProperty({ description: 'Document type' })
  @Column({
    type: 'enum',
    enum: DocumentType,
    default: DocumentType.OTHER,
  })
  type: DocumentType;

  @ApiProperty({ description: 'Path to the document in storage' })
  @Column()
  path: string;

  @ApiProperty({ description: 'Document MIME type' })
  @Column()
  mimeType: string;

  @ApiProperty({ description: 'Document size in bytes' })
  @Column()
  size: number;

  @ApiProperty({ description: 'Whether the document was generated by AI' })
  @Column({ default: false })
  isGeneratedByAi: boolean;

  @ApiProperty({ description: 'Additional metadata for the document' })
  @Column({ type: 'jsonb', nullable: true })
  metadata: Record<string, any>;

  // Relationships
  @ManyToOne(() => User, user => user.documents, { onDelete: 'CASCADE' })
  @JoinColumn({ name: 'userId' })
  user: User;

  @Column()
  userId: string;
}
