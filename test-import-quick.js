// Teste r√°pido de importa√ß√£o
console.log('üß™ Testando importa√ß√£o do documentService...\n');

const fs = require('fs');
const path = require('path');

// 1. Verificar se o arquivo existe
const documentServicePath = path.join(__dirname, 'src/services/document.service.ts');
console.log('üìÅ Verificando arquivo:', documentServicePath);

if (fs.existsSync(documentServicePath)) {
  console.log('‚úÖ Arquivo document.service.ts existe');
  
  // 2. Verificar conte√∫do do arquivo
  const content = fs.readFileSync(documentServicePath, 'utf8');
  
  // Verificar exporta√ß√£o
  if (content.includes('export const documentService')) {
    console.log('‚úÖ Exporta√ß√£o "export const documentService" encontrada');
  } else {
    console.log('‚ùå Exporta√ß√£o "export const documentService" N√ÉO encontrada');
  }
  
  // Verificar classe
  if (content.includes('class DocumentService')) {
    console.log('‚úÖ Classe DocumentService encontrada');
  } else {
    console.log('‚ùå Classe DocumentService N√ÉO encontrada');
  }
  
  // Verificar m√©todos principais
  const methods = ['saveResume', 'getResume', 'improveResumeWithAI', 'uploadResumePDF'];
  methods.forEach(method => {
    if (content.includes(method)) {
      console.log(`‚úÖ M√©todo ${method} encontrado`);
    } else {
      console.log(`‚ùå M√©todo ${method} N√ÉO encontrado`);
    }
  });
  
} else {
  console.log('‚ùå Arquivo document.service.ts N√ÉO existe');
}

// 3. Verificar importa√ß√£o no Dashboard
const dashboardPath = path.join(__dirname, 'src/pages/Dashboard.tsx');
console.log('\nüìÑ Verificando Dashboard.tsx...');

if (fs.existsSync(dashboardPath)) {
  console.log('‚úÖ Arquivo Dashboard.tsx existe');
  
  const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');
  
  // Verificar importa√ß√£o
  if (dashboardContent.includes("import { documentService } from '../services/document.service'")) {
    console.log('‚úÖ Importa√ß√£o correta encontrada no Dashboard');
  } else if (dashboardContent.includes('documentService')) {
    console.log('‚ö†Ô∏è  documentService mencionado, mas importa√ß√£o pode estar incorreta');
    
    // Mostrar linha da importa√ß√£o
    const lines = dashboardContent.split('\n');
    lines.forEach((line, index) => {
      if (line.includes('documentService')) {
        console.log(`   Linha ${index + 1}: ${line.trim()}`);
      }
    });
  } else {
    console.log('‚ùå documentService N√ÉO encontrado no Dashboard');
  }
} else {
  console.log('‚ùå Arquivo Dashboard.tsx N√ÉO existe');
}

// 4. Verificar se h√° arquivos .js conflitantes
console.log('\nüîç Verificando arquivos conflitantes...');

const conflictingFiles = [
  'src/services/document.service.js',
  'src/services/platformAuth.service.js'
];

conflictingFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  CONFLITO: ${file} existe (pode causar problema)`);
  } else {
    console.log(`‚úÖ ${file} n√£o existe (bom)`);
  }
});

console.log('\nüéØ Resultado do teste:');
console.log('Se todos os itens acima est√£o ‚úÖ, a importa√ß√£o deveria funcionar.');
console.log('Se h√° ‚ùå ou ‚ö†Ô∏è, esses s√£o os problemas a corrigir.');

console.log('\nüí° Pr√≥ximos passos:');
console.log('1. Corrigir qualquer ‚ùå encontrado');
console.log('2. Remover arquivos conflitantes (‚ö†Ô∏è)');
console.log('3. Reiniciar servidor: npm run dev');
console.log('4. Testar no navegador');

console.log('\n‚ú® Teste de importa√ß√£o conclu√≠do!');
